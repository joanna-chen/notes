Ruby
----

Declarations
---
variableName = value
---

Addition (+)
Subtraction (-)
Multiplication (*)
Division (/)
Exponentiation (**)
Modulo (%)

print: normal printing of string
---
print "Hello world!" 
>>>
Hello world!nil
---

puts: same as print but newline after the string
---
puts "Hello world!"
>>>
Hello world!

---

methods: called with a . and can also chain them together, just separate by a .
---
"Joanna".length
'Joanna'.reverse
puts 'joanna'.upcase
puts 'JOANNA'.downcase
>>>
6
annaoJ
JOANNA
joanna
---

string methods
.capitalize: capitlizes first letter of string and rest lowercase
.capitalize!: modifies the actual value it is called upon
.gsub!: global substitution
---
string.gsub!(/replacethis/, "newstuff")
---

single-line comment: #

multi-line comments: 
---
=begin
this is a comment
more comment
=end
---

gets: input
chomp: removes the newline at end of input
---
variableName = gets.chomp
---

string interpolation: putting a variable's value into a string
---
name = "Joanna"
"My name is #{name}"
>>>
My name is Joanna
---

basic control flow
---
if true
  statements
elsif boolean
  statements
else 
  statements
end
---
---
unless boolean
  statements # if boolean is false
else
  statements
end
---

comparators: ==, !=, <, <=, >, >=
logical/boolean operators: &&, ||, !

generally, methods ending in ? evaluate to boolean

while loop
---
while boolean
  statements
end
---

until loop
---
until boolean
  statements
end
---

additional assignment operators: +=, -=, *=, /=

for loop
---
for x in 1...10 # does not include 10
  statements
end
---
---
for x in 1..10 # includes 10
  statements
end
---

iterator
---
loop {
  statements
}
---
---
loop do 
  statements
  next if boolean # skips a certain instance
  break if boolean
end
---

array
---
[value1, value2, ...]
arrayName[index]
---

iterating array
---
arrayName.each do |value|
---

.each method
---
arrayOfNum.each do |num|
  puts num
end
---

.times method
---
number.times do # repeats 'number' of times
  statements
end
---

.split("delimiter")

hash
---
my_hash = Hash.new("default value") # creases an empty hash
my_hash = {} # also empty hash
hash = {
  key1 => value1,
  key2 => value2,
  key3 => value3
}
hash[key1]
---

iterating hash
---
hash.each do |key, value|
  statements
end
---

.sort_by function --> array of arrays
---
hash = hash.sort_by do |first, second|
  second
end
---

methods
---
def methodName(parameters)
  statements
end
---

splat arguments: argument preceded by * meaning possible multiple arguments
---
method(*argument)
---
