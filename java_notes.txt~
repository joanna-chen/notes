Java 
----

public static void main(String[] args) {
}
// main: when Java runs program, the code inside the main function is executed
// void: no value returned by the method

data types: int, boolean, char 

comments: //

arithmetic operators: +, -, *, /, %

relational operators: <, <=, >, >= 

equality operators: ==, !=

boolean operators: &&, ||, !

statements: if, if/else, if/else if/else

ternary statements: variableName = (boolean) ? 'Y' : 'N';

switch (variableName) { 
	case 1: statements;
	default: statements;
	}
	

class: set of instructions, how a data structure should behave
---
class ClassName {
}
---


class constructor: allows to create class instances
---
class ClassName {
	public Instance(parameter) {
	}
}
---


instance variables: describe details to the class
---
class ClassName {
	int inVarName;
	
	public Instance(parameter) {
		inVarName = parameter;
	}	
}
---


instance (of a class): an object in Java
---
class ClassName {
	int inVarName;
	
	public Instance(parameter) {
		inVarName = parameter;
	}
	
	public static void main(String[] args) {
		ClassName instanceName = new Instance(parameterValue);
}
---


method: pre-defined set of instructions
--- 
class ClassName {
	public void methodName(parameters) {
	}
}
--- // declare a method
---
public static void main(String[] args) {
	instanceName.methodName(parameterValues);
}
--- // call a method on an object


inheritance: inherit behaviour from another class
---
class ClassName1 extends ClassName2 {
}
--- // ClassName1 inherits behaviour from ClassName2


for loop
---
for (variable initialization; test condition; increment) {
}
---


for each loop
---

---


ArrayList: predefined Java class, data structure, list of data of specified type
---
ArrayList<DataType> arrayName = new ArrayList<DataType>();
arrayName.add(value);
arrayName.add(index, value);
arrayName.get(index);
arrayName.size(); // number of elements in the array
---




